import { Flavor, FlavorTypeMap, GeneratedMetadata, Icon } from '@icon-magic/icon-models';
import * as assert from 'assert';
import * as fs from 'fs-extra';
import * as path from 'path';

import {
  CustomElementGenerateOptions,
  svgToCustomElement
} from '../src/plugins/svg-to-custom-element';

const FIXTURES = path.resolve(__dirname, '..', '..', 'test', 'fixtures');
const output = path.resolve(FIXTURES, 'out');
const svgFile = fs.readFileSync(
  path.resolve(`${FIXTURES}/nav-icons/home/filled.svg`).toString(),
  'utf8'
);
const flavor: Flavor = new Flavor(`${FIXTURES}/nav-icons/home`, {
  name: 'filled',
  contents: svgFile,
  path: `${FIXTURES}/nav-icons/home/filled.svg`,
  types: {
    svg: {
      name: 'filled.svg',
      path: './filled.svg'
    },
  },
});
const icon = new Icon({
  iconPath: `${FIXTURES}/nav-icons/home`,
  variants: [
    {
      path: `${FIXTURES}/nav-icons/home/filled.svg`,
      name: 'filled',
    }
  ],
  sizes: [8, 16],
  resolutions: [1, 2, 3],
  outputPath: `/${FIXTURES}/out`,
  iconName: 'home',
  sourceConfigFile: `${FIXTURES}/nav-icons/iconrc.json`,
});

describe('svgToCustomElement()', function () {
  it('Creates normalized custom element asset and updates icon correctly', async () => {
    const options: CustomElementGenerateOptions = {
      namePrefix: 'test-prefix-',
    };
    const expectedFlavor: FlavorTypeMap = {
      svg: {
        name: 'filled.svg',
        path: './filled.svg',
      },
      customElement: {
        name: 'filled',
        path: './filled.js',
      }
    };
    const expectedCustomElement = `/**
 * Auto-generated by @icon-magic plugin
 * https://github.com/linkedin/icon-magic
 *
 * Usage:
 *
 * JS
 * import testPrefixHomeFilled './test-prefix-home-filled';
 * testPrefixHomeFilled();
 *
 * HTML
 * <test-prefix-home-filled></test-prefix-home-filled>
 */
export default function () {
  // Can't register the same tag more than once. Throws DOMException.
  if (window && !window.customElements.get('test-prefix-home-filled')) {
    window.customElements.define(
      'test-prefix-home-filled',
      class extends HTMLElement {
        // when the element is inserted into DOM
        connectedCallback() {
          this.innerHTML = '<svg data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><title>32dp</title><path d="M28,13.36L16.64,6.19a1.2,1.2,0,0,0-1.28,0L4,13.34l1,1.59,2-1.25V25a1,1,0,0,0,1,1h6V21h4v5h6a1,1,0,0,0,1-1V13.67L27,15Z" style="fill: #737373"/></svg>';
        }
      }
    );
  }
}
`;
    const outputFlavor: Flavor = await svgToCustomElement.fn(flavor, icon, options);
    assert.deepStrictEqual(outputFlavor.getConfig().types, expectedFlavor);
    const outputCustomElement = fs.readFileSync(
      path.resolve(`${output}/home/filled.js`).toString(),
      'utf8'
    );
    assert.strictEqual(outputCustomElement, expectedCustomElement);
  });

  it('Creates custom element asset with default prefix when param is missing', async () => {
    await svgToCustomElement.fn(flavor, icon);
    const outputCustomElement = fs.readFileSync(
      path.resolve(`${output}/home/filled.js`).toString(),
      'utf8'
    );
    assert.ok(/icon-magic-home-filled/.test(outputCustomElement));
  });

  it('Does not set custom element flavor if svg flavor is missing', async () => {
    const flavor: Flavor = new Flavor(`${FIXTURES}/nav-icons/home`, {
      name: 'filled',
      path: `${FIXTURES}/nav-icons/home/filled.svg`,
      types: {},
    });
    const outputFlavor: Flavor = await svgToCustomElement.fn(flavor, icon);
    assert.deepStrictEqual(outputFlavor.getConfig().types, {});
  });

  it('Creates custom element asset with color scheme', async () => {
    const flavor: Flavor = new Flavor(`${FIXTURES}/nav-icons/home`, {
      name: 'filled',
      path: `${FIXTURES}/nav-icons/home/filled.svg`,
      colorScheme: 'dark',
      types: {
        svg: {
          name: 'filled',
          path: './filled.svg',
        },
      },
    });
    const expectedFlavor: FlavorTypeMap = {
      svg: {
        name: 'filled',
        path: './filled.svg',
      },
      customElement: {
        name: 'filled',
        path: './filled.js',
        colorScheme: 'dark',
      }
    };
    const outputFlavor: Flavor = await svgToCustomElement.fn(flavor, icon);
    assert.deepStrictEqual(outputFlavor.getConfig().types, expectedFlavor);
  });

  it('Adds generated metadata to Icon', async () => {
    const generatedMetadata: GeneratedMetadata = {
      customElement: {
        namePrefix: 'icon-magic-',
      }
    };
    await svgToCustomElement.fn(flavor, icon);
    assert.deepStrictEqual(icon.generatedMetadata, generatedMetadata);
  });
});
